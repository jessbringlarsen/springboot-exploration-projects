name: 05 - Deploy the application

# https://docs.github.com/en/actions/deployment/about-deployments/deploying-with-github-actions#using-concurrency
# There will be a maximum of one running and one pending job or workflow in that uses the production concurrency group.
# Only the youngest pending job will be kept the others will be canceled.
concurrency: production

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_APPLICATION_NAME: ${{ vars.AWS_APPLICATION_NAME }}
  DOCKER_REPO_NAME: ${{ vars.DOCKER_REPO_NAME }}

on:
#  schedule:
#    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      docker-image-tag:
        description: "The Docker image tag to deploy"
        required: true
        default: 'latest'
      environmentName:
        description: 'The name of the environment to create.'
        options:
          - dev
          - staging
          - prod
        required: true
        default: 'dev'
jobs:
  deploy:
    runs-on: ubuntu-20.04
    name: Deploy application
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: NPM install
        working-directory: deployment
        run: npm install

      - name: Setup environment, manual
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "APP_ENVIRONMENT_NAME=${{ github.event.inputs.environmentName }}" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_TAG=${{ github.event.inputs.docker-image-tag }}" >> $GITHUB_ENV

      - name: Initialize environment variables
        if: github.event_name == 'schedule'
        run: |
          echo "DOCKER_IMAGE_TAG=latest" >> $GITHUB_ENV
          echo "APP_ENVIRONMENT_NAME=dev" >> $GITHUB_ENV

      - name: Deploy database
        working-directory: deployment
        run: npm run database:deploy

      - name: Deploy service
        working-directory: deployment
        run: npm run service:deploy
